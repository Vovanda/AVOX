"""refactor_and_add_chunk_embedding384_table

Revision ID: df1c125f288b
Revises: 9e886a2b7280
Create Date: 2025-07-13 18:07:10.430705

"""
from typing import Sequence, Union

import pgvector.sqlalchemy
import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'df1c125f288b'
down_revision: Union[str, Sequence[str], None] = '9e886a2b7280'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('chunk_embeddings_384',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('chunk_id', sa.UUID(), nullable=False),
    sa.Column('vector', pgvector.sqlalchemy.vector.VECTOR(dim=384), nullable=False, comment='use cosine; ivfflat(lists=100)'),
    sa.Column('embedding_model', sa.String(length=256), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['chunk_id'], ['kno.document_chunks.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    schema='kno'
    )
    op.create_index('ix_chunk_vector_cosine', 'chunk_embeddings_384', ['vector'], unique=False, schema='kno', postgresql_using='ivfflat', postgresql_ops={'vector': 'vector_cosine_ops'}, postgresql_with={'lists': 100})
    op.create_index(op.f('ix_kno_chunk_embeddings_384_embedding_model'), 'chunk_embeddings_384', ['embedding_model'], unique=False, schema='kno')
    op.drop_table('chunk_embeddings', schema='kno')
    op.add_column('document_chunks', sa.Column('is_hot', sa.Boolean(), nullable=True), schema='kno')
    op.drop_index(op.f('ix_chunk_important'), table_name='document_chunks', schema='kno')
    op.drop_index(op.f('ix_kno_document_chunks_is_important'), table_name='document_chunks', schema='kno')
    op.create_index(op.f('ix_kno_document_chunks_is_hot'), 'document_chunks', ['is_hot'], unique=False, schema='kno')
    op.drop_column('document_chunks', 'is_important', schema='kno')
    op.drop_column('document_chunks', 'vector', schema='kno')
    op.drop_index(op.f('ix_document_access_level'), table_name='documents', schema='kno')
    op.drop_index(op.f('ix_document_owner_company'), table_name='documents', schema='kno')
    op.create_index(op.f('ix_kno_documents_owner_id'), 'documents', ['owner_id'], unique=False, schema='kno')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_kno_documents_owner_id'), table_name='documents', schema='kno')
    op.create_index(op.f('ix_document_owner_company'), 'documents', ['owner_id', 'company_id'], unique=False, schema='kno')
    op.create_index(op.f('ix_document_access_level'), 'documents', ['access_level', 'is_approved'], unique=False, schema='kno')
    op.add_column('document_chunks', sa.Column('vector', pgvector.sqlalchemy.vector.VECTOR(dim=384), autoincrement=False, nullable=True), schema='kno')
    op.add_column('document_chunks', sa.Column('is_important', sa.BOOLEAN(), autoincrement=False, nullable=True), schema='kno')
    op.drop_index(op.f('ix_kno_document_chunks_is_hot'), table_name='document_chunks', schema='kno')
    op.create_index(op.f('ix_kno_document_chunks_is_important'), 'document_chunks', ['is_important'], unique=False, schema='kno')
    op.create_index(op.f('ix_chunk_important'), 'document_chunks', ['document_id', 'is_important'], unique=False, schema='kno')
    op.drop_column('document_chunks', 'is_hot', schema='kno')
    op.create_table('chunk_embeddings',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('chunk_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('vector', pgvector.sqlalchemy.vector.VECTOR(dim=512), autoincrement=False, nullable=True),
    sa.Column('status', postgresql.ENUM('PENDING', 'PROCESSING', 'COMPLETED', 'FAILED', 'SCHEDULED', name='embeddingstatus'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['chunk_id'], ['kno.document_chunks.id'], name=op.f('chunk_embeddings_chunk_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('chunk_embeddings_pkey')),
    schema='kno'
    )
    op.drop_index(op.f('ix_kno_chunk_embeddings_384_embedding_model'), table_name='chunk_embeddings_384', schema='kno')
    op.drop_index('ix_chunk_vector_cosine', table_name='chunk_embeddings_384', schema='kno', postgresql_using='ivfflat', postgresql_ops={'vector': 'vector_cosine_ops'}, postgresql_with={'lists': 100})
    op.drop_table('chunk_embeddings_384', schema='kno')
    # ### end Alembic commands ###
