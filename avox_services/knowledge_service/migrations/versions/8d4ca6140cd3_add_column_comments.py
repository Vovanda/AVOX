"""add column comments

Revision ID: 8d4ca6140cd3
Revises: df1c125f288b
Create Date: 2025-07-13 18:29:53.324320

"""
from typing import Sequence, Union

import pgvector.sqlalchemy
import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '8d4ca6140cd3'
down_revision: Union[str, Sequence[str], None] = 'df1c125f288b'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('access_grants', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment='Время создания',
               existing_nullable=False,
               schema='kno')
    op.alter_column('access_grants', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment='Время последнего обновления',
               existing_nullable=False,
               schema='kno')
    op.alter_column('chunk_embeddings_384', 'id',
               existing_type=sa.UUID(),
               comment='Уникальный идентификатор эмбеддинга',
               existing_nullable=False,
               schema='kno')
    op.alter_column('chunk_embeddings_384', 'chunk_id',
               existing_type=sa.UUID(),
               comment='Фрагмент, к которому относится эмбеддинг',
               existing_nullable=False,
               schema='kno')
    op.alter_column('chunk_embeddings_384', 'vector',
               existing_type=pgvector.sqlalchemy.vector.VECTOR(dim=384),
               comment='Эмбеддинг вектора (use cosine; ivfflat(lists=100))',
               existing_comment='use cosine; ivfflat(lists=100)',
               existing_nullable=False,
               schema='kno')
    op.alter_column('chunk_embeddings_384', 'embedding_model',
               existing_type=sa.VARCHAR(length=256),
               type_=sa.String(length=255),
               comment='Название модели эмбеддинга',
               existing_nullable=False,
               schema='kno')
    op.alter_column('chunk_embeddings_384', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment='Время создания',
               existing_nullable=False,
               schema='kno')
    op.alter_column('chunk_embeddings_384', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment='Время последнего обновления',
               existing_nullable=False,
               schema='kno')
    op.alter_column('companies', 'id',
               existing_type=sa.UUID(),
               comment='Уникальный идентификатор компании',
               existing_nullable=False,
               schema='kno')
    op.alter_column('companies', 'name',
               existing_type=sa.VARCHAR(length=255),
               comment='Название компании',
               existing_nullable=False,
               schema='kno')
    op.alter_column('companies', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment='Время создания',
               existing_nullable=False,
               schema='kno')
    op.alter_column('companies', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment='Время последнего обновления',
               existing_nullable=False,
               schema='kno')
    op.alter_column('document_chunks', 'id',
               existing_type=sa.UUID(),
               comment='Уникальный идентификатор части документа',
               existing_nullable=False,
               schema='kno')
    op.alter_column('document_chunks', 'document_id',
               existing_type=sa.UUID(),
               comment='Документ, к которому относится часть',
               existing_nullable=False,
               schema='kno')
    op.alter_column('document_chunks', 'is_hot',
               existing_type=sa.BOOLEAN(),
               comment='Является ли актуальной (важной) частью',
               existing_nullable=True,
               schema='kno')
    op.alter_column('document_chunks', 'chunk_text',
               existing_type=sa.TEXT(),
               comment='Текст фрагмента',
               existing_nullable=False,
               schema='kno')
    op.alter_column('document_chunks', 'chunk_idx',
               existing_type=sa.INTEGER(),
               comment='Позиция части в документе',
               existing_nullable=False,
               schema='kno')
    op.alter_column('document_chunks', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment='Время создания',
               existing_nullable=False,
               schema='kno')
    op.alter_column('document_chunks', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment='Время последнего обновления',
               existing_nullable=False,
               schema='kno')
    op.alter_column('documents', 'id',
               existing_type=sa.UUID(),
               comment='Уникальный идентификатор документа',
               existing_nullable=False,
               schema='kno')
    op.alter_column('documents', 'company_id',
               existing_type=sa.UUID(),
               comment='Компания, которой принадлежит документ',
               existing_nullable=False,
               schema='kno')
    op.alter_column('documents', 'owner_id',
               existing_type=sa.UUID(),
               comment='Владелец (создатель) документа',
               existing_nullable=True,
               schema='kno')
    op.alter_column('documents', 'source_type',
               existing_type=postgresql.ENUM('URI', 'CONFLUENCE', 'FILE', 'TEXT_INPUT', 'WEB_SCRAPING', name='sourcetype'),
               comment='Источник: FILE, TEXT, URL, CHAT, API и др.',
               existing_nullable=False,
               schema='kno')
    op.alter_column('documents', 'title',
               existing_type=sa.VARCHAR(length=512),
               comment='Название документа',
               existing_nullable=False,
               schema='kno')
    op.alter_column('documents', 'access_level',
               existing_type=postgresql.ENUM('RESTRICTED', 'INTERNAL', 'PUBLIC', name='docaccesslevel'),
               comment='Уровень доступа: PUBLIC, INTERNAL, RESTRICTED',
               existing_nullable=False,
               schema='kno')
    op.alter_column('documents', 'is_hot',
               existing_type=sa.BOOLEAN(),
               comment='Является ли актуальным',
               existing_nullable=True,
               schema='kno')
    op.alter_column('documents', 'is_approved',
               existing_type=sa.BOOLEAN(),
               comment='Одобрен ли документ',
               existing_nullable=True,
               schema='kno')
    op.alter_column('documents', 'last_accessed_at',
               existing_type=postgresql.TIMESTAMP(),
               comment='Время последнего доступа',
               existing_nullable=True,
               schema='kno')
    op.alter_column('documents', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment='Время создания',
               existing_nullable=False,
               schema='kno')
    op.alter_column('documents', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment='Время последнего обновления',
               existing_nullable=False,
               schema='kno')
    op.alter_column('users', 'id',
               existing_type=sa.UUID(),
               comment='Уникальный идентификатор пользователя',
               existing_nullable=False,
               schema='kno')
    op.alter_column('users', 'external_id',
               existing_type=sa.VARCHAR(length=255),
               comment='Идентификатор во внешней системе',
               existing_nullable=True,
               schema='kno')
    op.alter_column('users', 'provider',
               existing_type=postgresql.ENUM('INTERNAL', 'VK', 'YANDEX', 'GOOGLE', name='authprovider'),
               comment='Провайдер аутентификации: INTERNAL, VK, GOOGLE и др.',
               existing_nullable=False,
               schema='kno')
    op.alter_column('users', 'company_id',
               existing_type=sa.UUID(),
               comment='Компания, к которой принадлежит пользователь',
               existing_nullable=True,
               schema='kno')
    op.alter_column('users', 'user_type',
               existing_type=postgresql.ENUM('UNKNOWN', 'INTERNAL', 'EXTERNAL', 'SYSTEM', name='usertype'),
               comment='Тип пользователя: UNKNOWN, INTERNAL, EXTERNAL, SYSTEM',
               existing_nullable=False,
               schema='kno')
    op.alter_column('users', 'role',
               existing_type=postgresql.ENUM('BASE', 'MANAGER', 'MODERATOR', 'ADMIN', 'API', name='userrole'),
               comment='Роль пользователя: BASE, MANAGER, MODERATOR, ADMIN, API',
               existing_nullable=False,
               schema='kno')
    op.alter_column('users', 'last_login',
               existing_type=postgresql.TIMESTAMP(),
               comment='Последний вход',
               existing_nullable=True,
               schema='kno')
    op.alter_column('users', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment='Время создания',
               existing_nullable=False,
               schema='kno')
    op.alter_column('users', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment='Время последнего обновления',
               existing_nullable=False,
               schema='kno')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('users', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment=None,
               existing_comment='Время последнего обновления',
               existing_nullable=False,
               schema='kno')
    op.alter_column('users', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment=None,
               existing_comment='Время создания',
               existing_nullable=False,
               schema='kno')
    op.alter_column('users', 'last_login',
               existing_type=postgresql.TIMESTAMP(),
               comment=None,
               existing_comment='Последний вход',
               existing_nullable=True,
               schema='kno')
    op.alter_column('users', 'role',
               existing_type=postgresql.ENUM('BASE', 'MANAGER', 'MODERATOR', 'ADMIN', 'API', name='userrole'),
               comment=None,
               existing_comment='Роль пользователя: BASE, MANAGER, MODERATOR, ADMIN, API',
               existing_nullable=False,
               schema='kno')
    op.alter_column('users', 'user_type',
               existing_type=postgresql.ENUM('UNKNOWN', 'INTERNAL', 'EXTERNAL', 'SYSTEM', name='usertype'),
               comment=None,
               existing_comment='Тип пользователя: UNKNOWN, INTERNAL, EXTERNAL, SYSTEM',
               existing_nullable=False,
               schema='kno')
    op.alter_column('users', 'company_id',
               existing_type=sa.UUID(),
               comment=None,
               existing_comment='Компания, к которой принадлежит пользователь',
               existing_nullable=True,
               schema='kno')
    op.alter_column('users', 'provider',
               existing_type=postgresql.ENUM('INTERNAL', 'VK', 'YANDEX', 'GOOGLE', name='authprovider'),
               comment=None,
               existing_comment='Провайдер аутентификации: INTERNAL, VK, GOOGLE и др.',
               existing_nullable=False,
               schema='kno')
    op.alter_column('users', 'external_id',
               existing_type=sa.VARCHAR(length=255),
               comment=None,
               existing_comment='Идентификатор во внешней системе',
               existing_nullable=True,
               schema='kno')
    op.alter_column('users', 'id',
               existing_type=sa.UUID(),
               comment=None,
               existing_comment='Уникальный идентификатор пользователя',
               existing_nullable=False,
               schema='kno')
    op.alter_column('documents', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment=None,
               existing_comment='Время последнего обновления',
               existing_nullable=False,
               schema='kno')
    op.alter_column('documents', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment=None,
               existing_comment='Время создания',
               existing_nullable=False,
               schema='kno')
    op.alter_column('documents', 'last_accessed_at',
               existing_type=postgresql.TIMESTAMP(),
               comment=None,
               existing_comment='Время последнего доступа',
               existing_nullable=True,
               schema='kno')
    op.alter_column('documents', 'is_approved',
               existing_type=sa.BOOLEAN(),
               comment=None,
               existing_comment='Одобрен ли документ',
               existing_nullable=True,
               schema='kno')
    op.alter_column('documents', 'is_hot',
               existing_type=sa.BOOLEAN(),
               comment=None,
               existing_comment='Является ли актуальным',
               existing_nullable=True,
               schema='kno')
    op.alter_column('documents', 'access_level',
               existing_type=postgresql.ENUM('RESTRICTED', 'INTERNAL', 'PUBLIC', name='docaccesslevel'),
               comment=None,
               existing_comment='Уровень доступа: PUBLIC, INTERNAL, RESTRICTED',
               existing_nullable=False,
               schema='kno')
    op.alter_column('documents', 'title',
               existing_type=sa.VARCHAR(length=512),
               comment=None,
               existing_comment='Название документа',
               existing_nullable=False,
               schema='kno')
    op.alter_column('documents', 'source_type',
               existing_type=postgresql.ENUM('URI', 'CONFLUENCE', 'FILE', 'TEXT_INPUT', 'WEB_SCRAPING', name='sourcetype'),
               comment=None,
               existing_comment='Источник: FILE, TEXT, URL, CHAT, API и др.',
               existing_nullable=False,
               schema='kno')
    op.alter_column('documents', 'owner_id',
               existing_type=sa.UUID(),
               comment=None,
               existing_comment='Владелец (создатель) документа',
               existing_nullable=True,
               schema='kno')
    op.alter_column('documents', 'company_id',
               existing_type=sa.UUID(),
               comment=None,
               existing_comment='Компания, которой принадлежит документ',
               existing_nullable=False,
               schema='kno')
    op.alter_column('documents', 'id',
               existing_type=sa.UUID(),
               comment=None,
               existing_comment='Уникальный идентификатор документа',
               existing_nullable=False,
               schema='kno')
    op.alter_column('document_chunks', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment=None,
               existing_comment='Время последнего обновления',
               existing_nullable=False,
               schema='kno')
    op.alter_column('document_chunks', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment=None,
               existing_comment='Время создания',
               existing_nullable=False,
               schema='kno')
    op.alter_column('document_chunks', 'chunk_idx',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='Позиция части в документе',
               existing_nullable=False,
               schema='kno')
    op.alter_column('document_chunks', 'chunk_text',
               existing_type=sa.TEXT(),
               comment=None,
               existing_comment='Текст фрагмента',
               existing_nullable=False,
               schema='kno')
    op.alter_column('document_chunks', 'is_hot',
               existing_type=sa.BOOLEAN(),
               comment=None,
               existing_comment='Является ли актуальной (важной) частью',
               existing_nullable=True,
               schema='kno')
    op.alter_column('document_chunks', 'document_id',
               existing_type=sa.UUID(),
               comment=None,
               existing_comment='Документ, к которому относится часть',
               existing_nullable=False,
               schema='kno')
    op.alter_column('document_chunks', 'id',
               existing_type=sa.UUID(),
               comment=None,
               existing_comment='Уникальный идентификатор части документа',
               existing_nullable=False,
               schema='kno')
    op.alter_column('companies', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment=None,
               existing_comment='Время последнего обновления',
               existing_nullable=False,
               schema='kno')
    op.alter_column('companies', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment=None,
               existing_comment='Время создания',
               existing_nullable=False,
               schema='kno')
    op.alter_column('companies', 'name',
               existing_type=sa.VARCHAR(length=255),
               comment=None,
               existing_comment='Название компании',
               existing_nullable=False,
               schema='kno')
    op.alter_column('companies', 'id',
               existing_type=sa.UUID(),
               comment=None,
               existing_comment='Уникальный идентификатор компании',
               existing_nullable=False,
               schema='kno')
    op.alter_column('chunk_embeddings_384', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment=None,
               existing_comment='Время последнего обновления',
               existing_nullable=False,
               schema='kno')
    op.alter_column('chunk_embeddings_384', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment=None,
               existing_comment='Время создания',
               existing_nullable=False,
               schema='kno')
    op.alter_column('chunk_embeddings_384', 'embedding_model',
               existing_type=sa.String(length=255),
               type_=sa.VARCHAR(length=256),
               comment=None,
               existing_comment='Название модели эмбеддинга',
               existing_nullable=False,
               schema='kno')
    op.alter_column('chunk_embeddings_384', 'vector',
               existing_type=pgvector.sqlalchemy.vector.VECTOR(dim=384),
               comment='use cosine; ivfflat(lists=100)',
               existing_comment='Эмбеддинг вектора (use cosine; ivfflat(lists=100))',
               existing_nullable=False,
               schema='kno')
    op.alter_column('chunk_embeddings_384', 'chunk_id',
               existing_type=sa.UUID(),
               comment=None,
               existing_comment='Фрагмент, к которому относится эмбеддинг',
               existing_nullable=False,
               schema='kno')
    op.alter_column('chunk_embeddings_384', 'id',
               existing_type=sa.UUID(),
               comment=None,
               existing_comment='Уникальный идентификатор эмбеддинга',
               existing_nullable=False,
               schema='kno')
    op.alter_column('access_grants', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment=None,
               existing_comment='Время последнего обновления',
               existing_nullable=False,
               schema='kno')
    op.alter_column('access_grants', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment=None,
               existing_comment='Время создания',
               existing_nullable=False,
               schema='kno')
    # ### end Alembic commands ###
