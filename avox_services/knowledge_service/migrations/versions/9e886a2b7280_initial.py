"""initial

Revision ID: 9e886a2b7280
Revises: 
Create Date: 2025-07-03 00:11:28.342081

"""
from typing import Sequence, Union

import pgvector.sqlalchemy
import sqlalchemy as sa
from alembic import op

# revision identifiers, used by Alembic.
revision: str = '9e886a2b7280'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('companies',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    schema='kno'
    )
    op.create_table('users',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('external_id', sa.String(length=255), nullable=True),
    sa.Column('provider', sa.Enum('INTERNAL', 'VK', 'YANDEX', 'GOOGLE', name='authprovider'), nullable=False),
    sa.Column('company_id', sa.UUID(), nullable=True),
    sa.Column('user_type', sa.Enum('UNKNOWN', 'INTERNAL', 'EXTERNAL', 'SYSTEM', name='usertype'), nullable=False),
    sa.Column('role', sa.Enum('BASE', 'MANAGER', 'MODERATOR', 'ADMIN', 'API', name='userrole'), nullable=False),
    sa.Column('last_login', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['company_id'], ['kno.companies.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    schema='kno'
    )
    op.create_index('idx_user_company_role', 'users', ['company_id', 'role'], unique=False, schema='kno')
    op.create_index('uq_provider_external', 'users', ['provider', 'external_id'], unique=True, schema='kno')
    op.create_table('documents',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('company_id', sa.UUID(), nullable=False),
    sa.Column('owner_id', sa.UUID(), nullable=True),
    sa.Column('source_type', sa.Enum('URI', 'CONFLUENCE', 'FILE', 'TEXT_INPUT', 'WEB_SCRAPING', name='sourcetype'), nullable=False),
    sa.Column('title', sa.String(length=512), nullable=False),
    sa.Column('access_level', sa.Enum('RESTRICTED', 'INTERNAL', 'PUBLIC', name='docaccesslevel'), nullable=False),
    sa.Column('is_hot', sa.Boolean(), nullable=True),
    sa.Column('is_approved', sa.Boolean(), nullable=True),
    sa.Column('last_accessed_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['company_id'], ['kno.companies.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['owner_id'], ['kno.users.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id'),
    schema='kno'
    )
    op.create_index('ix_document_access_level', 'documents', ['access_level', 'is_approved'], unique=False, schema='kno')
    op.create_index('ix_document_owner_company', 'documents', ['owner_id', 'company_id'], unique=False, schema='kno')
    op.create_index(op.f('ix_kno_documents_is_approved'), 'documents', ['is_approved'], unique=False, schema='kno')
    op.create_index(op.f('ix_kno_documents_is_hot'), 'documents', ['is_hot'], unique=False, schema='kno')
    op.create_index(op.f('ix_kno_documents_title'), 'documents', ['title'], unique=False, schema='kno')
    op.create_table('access_grants',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('document_id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('access_role', sa.Enum('UNKNOWN', 'READER', 'CONTRIBUTOR', 'EDITOR', name='docaccessrole'), nullable=False),
    sa.Column('is_revoked', sa.Boolean(), nullable=True),
    sa.Column('expires_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['document_id'], ['kno.documents.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['kno.users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    schema='kno'
    )
    op.create_table('document_chunks',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('document_id', sa.UUID(), nullable=False),
    sa.Column('is_important', sa.Boolean(), nullable=True),
    sa.Column('chunk_text', sa.Text(), nullable=False),
    sa.Column('chunk_idx', sa.Integer(), nullable=False),
    sa.Column('vector', pgvector.sqlalchemy.Vector(dim=384), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['document_id'], ['kno.documents.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    schema='kno'
    )
    op.create_index('ix_chunk_document_idx', 'document_chunks', ['document_id', 'chunk_idx'], unique=True, schema='kno')
    op.create_index('ix_chunk_important', 'document_chunks', ['document_id', 'is_important'], unique=False, schema='kno')
    op.create_index(op.f('ix_kno_document_chunks_is_important'), 'document_chunks', ['is_important'], unique=False, schema='kno')
    op.create_table('chunk_embeddings',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('chunk_id', sa.UUID(), nullable=False),
    sa.Column('vector', pgvector.sqlalchemy.Vector(dim=512), nullable=True),
    sa.Column('status', sa.Enum('PENDING', 'PROCESSING', 'COMPLETED', 'FAILED', 'SCHEDULED', name='embeddingstatus'), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['chunk_id'], ['kno.document_chunks.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    schema='kno'
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('chunk_embeddings', schema='kno')
    op.drop_index(op.f('ix_kno_document_chunks_is_important'), table_name='document_chunks', schema='kno')
    op.drop_index('ix_chunk_important', table_name='document_chunks', schema='kno')
    op.drop_index('ix_chunk_document_idx', table_name='document_chunks', schema='kno')
    op.drop_table('document_chunks', schema='kno')
    op.drop_table('access_grants', schema='kno')
    op.drop_index(op.f('ix_kno_documents_title'), table_name='documents', schema='kno')
    op.drop_index(op.f('ix_kno_documents_is_hot'), table_name='documents', schema='kno')
    op.drop_index(op.f('ix_kno_documents_is_approved'), table_name='documents', schema='kno')
    op.drop_index('ix_document_owner_company', table_name='documents', schema='kno')
    op.drop_index('ix_document_access_level', table_name='documents', schema='kno')
    op.drop_table('documents', schema='kno')
    op.drop_index('uq_provider_external', table_name='users', schema='kno')
    op.drop_index('idx_user_company_role', table_name='users', schema='kno')
    op.drop_table('users', schema='kno')
    op.drop_table('companies', schema='kno')
    # ### end Alembic commands ###
